#!/usr/bin/python
import os
import sys
#TODO TopoMapper Plus
#TODO Add nmap to applications
def write_logs(where, what):
    f = open(where,'w')
    f.write(str(what))
    f.close()
      
      
def get_nmap_open_ports(ip_address, domain_path):
    nmap_result = os.popen("nmap -sV "+ip_address+" -p 1-65535 | awk '{print $1,$3,$4,$5,$6,$7,$8}'").readlines()
    write_logs(domain_path+'nmap_open_ports_'+ip_address,str(nmap_result))
    nmap_dict = {}
    for line in nmap_result:
        if 'unrecognized' in line:
            break
        if 'unknown' in line:
            continue
        space_number = line.find(' ')
        nmap_dict[line[:space_number]] = line[space_number:].strip()
        #TODO does key has number
        write_logs(domain_path+'nmap_open_ports_dict'+ip_address, nmap_dict)      
    return nmap_dict   
      
def get_nmap_traceroute(ip_address, domain_path):
    nmap_result = os.popen("nmap -A -T4 "+ip_address).readlines()
    f = open(domain_path+'nmap_traceroute_'+ip_address,'w')
    flag = False
    for line in nmap_result:     
        if "TRACEROUTE" in line:
            flag = True
        if flag: 
            f.write(str(line))
    f.close
    
def get_httprint_result(ip_address, domain_path):
    httprint_result = os.popen("./httprint_301/linux/httprint -P0 -h "+ip_address+" -s httprint_301/linux/signatures.txt").readlines()
    write_logs(domain_path+'httprint_'+ip_address, httprint_result)
        
    applications = []
    for line in httprint_result:
	if 'Banner Reported' in line:
	   applications.append(line[16:])
	if 'Banner Deduced' in line:
           line_app_list = line[16:].split(',')
           applications.extend(line_app_list)
    return applications    
    
def fingerprint():
    if os.getuid() != 0:
        print("Sorry, you need root privileges")
        sys.exit()
    if len(sys.argv) != 2:
      print("Please, specify host as the first parameter.")
      sys.exit()
    import re
    import socket
    is_ip = re.compile(r'[0-9\.]{11,14}$')
    if is_ip.match(sys.argv[1]) is None:
      domain_name = sys.argv[1]
      ip_addresses = socket.gethostbyname_ex(sys.argv[1])[2]
    else:
      ip_addreses = list(sys.argv[1])
      domain_name = socket.gethostbyaddr(sys.argv[1])[0]

    abs_path = os.path.abspath(os.curdir)+"/fingerprint_logs"

    if not os.path.exists(abs_path):
	os.popen("mkdir fingerprint_logs")

    if not os.path.exists(abs_path+"/"+domain_name):
	os.popen("mkdir fingerprint_logs/"+domain_name)

    domain_path = abs_path+"/"+domain_name+"/"

    write_logs(domain_path+'host_ip_info', domain_name)
    write_logs(domain_path+'host_ip_info', ip_addresses)
    write_logs(domain_path+'whois',os.popen("whois "+domain_name).read())
    
    for ip_address in ip_addresses: 
        print(ip_address)
        nmap_dict = {}
        applications = {}
        answer = raw_input("Do you need nmap open ports testing? (y/n):\n")
	if answer == 'y':
	    nmap_dict = get_nmap_open_ports(ip_address, domain_path)
	    """if nmap_dict.get('25/tcp'):
		answer = raw_input("It seems that this host has email service, do you have login and password? (y/n):\n")
		if answer == 'y':
		    smtp_login = raw_input("Please, input login for email service:\n")
		    smtp_password = raw_input("Please, input password for email service:\n")
		    send_bad_email(smtp_login, smtp_password, domain_name, ip_address, domain_path)
	    """
	answer = raw_input("Do you need nmap_traceroute? (y/n):\n")
	if answer == 'y':   
	    get_nmap_traceroute(ip_address, domain_path)    
        
        answer = raw_input("Do you need httprint testing? (y/n):\n")
	if answer == 'y':   
            applications = get_httprint_result(ip_address, domain_path)
            cve_request(applications, domain_path, ip_address)     
        
        if nmap_dict:
            for key, value in nmap_dict.iteritems():
                print(key)
                print(value)
	      
def cve_request(applications, domain_path, ip_address):
    import urllib2
    app_dict = {}
    #TODO if nothing found reduce app_string_for_request len
    for app in applications:
        if "[" in app:
            continue
        app = app.strip()
        app_string_for_request = ""
        for char in app:
            if "/" == char or " " == char:
                app_string_for_request = app_string_for_request + "+"
            else:
                app_string_for_request = app_string_for_request + char    
        
        app_dict[app] = []
        app_dict[app].append("https://exploits.shodan.io/?q="+app_string_for_request)
        url = "http://www.google.com/search?q="+app_string_for_request+"+cve+security+vulnerabilities";
        opener = urllib2.build_opener()
        opener.addheaders = [('User-agent', 'Mozilla/5.0')]
        page = opener.open(url).read()
        

        #TODO another function
        string_for_find = "http://www.cvedetails.com/vulnerability-list/"
        index = page.find(string_for_find)
        if index == -1:
            string_for_find = '<a href="/url?q='
            index = page.find(string_for_find)+len(string_for_find)
            link = ""
            i = 0
            while page[i+index] != '"' and i+index < len(page):
                link = link + page[i+index]     
                i = i + 1
        else:
            index = index + len(string_for_find)
            link = string_for_find
            i = 0
            while page[i+index] != '"' and i+index < len(page):
                link = link + page[i+index]     
                i = i + 1
        app_dict[app].append(link)
        write_logs(domain_path+'httprint_'+ip_address+"_"+"pages",app_dict)
        
        
        
        
def send_bad_email(smtp_login, smtp_password, domain_name, ip_address, domain_path):
  
    import smtplib
    import string
    import random
    sender = smtp_login+"@"+domain_name
    smtp_login = sender
    smtp_password = smtp_password
    recipient = ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(10))+"@"+domain_name
    smtp_server = ip_address
    smtp_port = 25
    subject = "Hello mail"
    msg = ("From: %s\r\nTo: %s\r\nSubject: %s\n"% (sender, ", ".join(recipient), subject))
    msg += "Content-type: text/html\n\n"
    server = smtplib.SMTP(smtp_server, smtp_port)
    server.ehlo()
    server.starttls()
    server.login(smtp_login, smtp_password)
    from smtplib import SMTPRecipientsRefused
    try:
        server.sendmail(sender, recipient, msg)
        print("Email sent")
    except SMTPRecipientsRefused as e:
        write_logs(domain_path+'email_sent_log', e)
        
    server.quit()


if __name__ == "__main__":
    fingerprint()

