#!/usr/bin/python
def fingerprint():
    import sys
    if len(sys.argv) != 2:
      print("Please, specify host as the first parameter.")
      sys.exit()
    import os
    import re
    import socket
    is_ip = re.compile(r'[0-9\.]{11,14}$')
    if is_ip.match(sys.argv[1]) is None:
      domain_name = sys.argv[1]
      ip_addresses = socket.gethostbyname_ex(sys.argv[1])[2]
    else:
      ip_addreses = list(sys.argv[1])
      domain_name = socket.gethostbyaddr(sys.argv[1])[0]

    abs_path = os.path.abspath(os.curdir)+"/fingerprint_logs"

    if not os.path.exists(abs_path):
	os.popen("mkdir fingerprint_logs")

    if not os.path.exists(abs_path+"/"+domain_name):
	os.popen("mkdir fingerprint_logs/"+domain_name)

    domain_path = abs_path+"/"+domain_name+"/"

    f = open(domain_path+'host_ip_info','w')
    f.write(domain_name)
    f.write(str(ip_addresses))
    f.close()

    f = open(domain_path+'whois','w')
    f.write(os.popen("whois "+domain_name).read())
    f.close()

    for ip_address in ip_addresses: 
        print(ip_address)
	nmap_result = os.popen("nmap -sV "+ip_address+" -p 1-65535 | awk '{print $1,$3,$4,$5,$6,$7,$8}'").readlines()
	f = open(domain_path+'nmap_open_ports_'+ip_address,'w')
	f.write(str(nmap_result))
	f.close
	nmap_dict = {}
	for line in nmap_result:
	    if 'unrecognized' in line:
		break
	    if 'unknown' in line:
		continue
	    space_number = line.find(' ')
	    nmap_dict[line[:space_number]] = line[space_number:]
	
	if nmap_dict.get('25/tcp'):
	    answer = raw_input("It seems that this host has email service, do you have login and password? (y/n):\n")
	    if answer == 'y':
		smtp_login = raw_input("Please, input login for email service:\n")
		smtp_password = raw_input("Please, input password for email service:\n")
		send_bad_email(login, password, domain_name, ip_address, domain_path)
        
        if os.getuid() == 0:
            nmap_result = os.popen("nmap -A -T4 "+ip_address).read()
	    f = open(domain_path+'nmap_traceroute'+ip_address,'w')
	    f.write(str(nmap_result))
	    f.close

def send_bad_email(login, password, domain_name, ip_address, domain_path):
  
    import smtplib
    import string
    import random
    sender = smtp_login+"@"+domain_name
    smtp_login = sender
    smtp_password = smtp_password
    recipient = ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(10))+"@"+domain_name
    smtp_server = ip_address
    smtp_port = 25
    subject = "Hello mail"
    msg = ("From: %s\r\nTo: %s\r\nSubject: %s\n"% (sender, ", ".join(recipient), subject))
    msg += "Content-type: text/html\n\n"
    server = smtplib.SMTP(smtp_server, smtp_port)
    server.ehlo()
    server.starttls()
    server.login(smtp_login, smtp_password)
    try:
        server.sendmail(sender, recipient, msg)
        print("Email sent")
    except SMTPRecipientsRefused as e:
        f = open(domain_path+'email_sent_log','w')
        f.write(str(e))
        f.close()
        
    server.quit()